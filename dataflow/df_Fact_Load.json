{
	"name": "df_Fact_Load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "source1"
				},
				{
					"name": "sourceLocDim"
				},
				{
					"name": "sourceBreedDim"
				},
				{
					"name": "sourceDateDim"
				},
				{
					"name": "FactMaxID"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinLocDim"
				},
				{
					"name": "joinBreedDim"
				},
				{
					"name": "joinDateDim"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "joinFCT"
				},
				{
					"name": "select1",
					"description": "Renaming joinFCT to select1 with columns 'LOCATION_SK, BREED_SK, PET_LIC_SK, DATE_DIM_SK, DI_JOB_ID, DI_LOAD_DT'"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Species as string,",
				"          Primary_Breed as string,",
				"          Secondary_Breed as string,",
				"          ZIP_Code as string,",
				"          LIC_ISSUE_DATE as date,",
				"          LIC_Number as decimal(38,0),",
				"          Animal_NAME as string,",
				"          Load_Date as date,",
				"          Job_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> source1",
				"source(output(",
				"          LOCATION_SK as decimal(10,0),",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> sourceLocDim",
				"source(output(",
				"          BREED_SK as decimal(10,0),",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> sourceBreedDim",
				"source(output(",
				"          DT as date,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as date,",
				"          END_DAY_OF_MONTH as date,",
				"          QUARTER_NUM as decimal(2,0),",
				"          DAY_OF_WEEK as decimal(2,0),",
				"          IS_WEEKEND as decimal(1,0),",
				"          YEAR_NUM as decimal(4,0),",
				"          MONTH_NUM as decimal(2,0),",
				"          DAY_NUM as decimal(2,0),",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> sourceDateDim",
				"source(output(",
				"          MAX_LIC as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> FactMaxID",
				"source1, sourceLocDim join(source1@ZIP_Code == sourceLocDim@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocDim",
				"joinLocDim, sourceBreedDim join(Primary_Breed == PRIMARY_BREED_NAME",
				"     && Secondary_Breed == SECONDARY_BREED_NAME",
				"     && Species == SPECIES_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreedDim",
				"joinBreedDim, sourceDateDim join(LIC_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDateDim",
				"select1 keyGenerate(output(ROW_NUM as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"joinDateDim, FactMaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFCT",
				"joinFCT select(mapColumn(",
				"          PET_LIC_SK = MAX_LIC,",
				"          DATE_DIM_SK,",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          DI_JOB_ID = sourceLocDim@DI_JOB_ID,",
				"          DI_LOAD_DT = sourceLocDim@DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 derive(PET_LIC_SK = PET_LIC_SK + ROW_NUM) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          PET_LIC_SK,",
				"          DATE_DIM_SK,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     format: 'table') ~> sink1"
			]
		}
	}
}